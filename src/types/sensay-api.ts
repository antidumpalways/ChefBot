/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/replicas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List replicas
         * @description List replicas with pagination with optional filtering. Only Replicas that are public or belong to the authenticated user are returned.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filters by the owner UUID of the Replicas */
                    owner_uuid?: string;
                    /** @description The replica owner ID. */
                    ownerID?: string;
                    /** @description Pagination: The page number to return */
                    page?: number;
                    page_index?: number;
                    /** @description Pagination: The number of items per page */
                    page_size?: number;
                    /** @description Filters by the replica's slug */
                    slug?: string;
                    /** @description Search: by name of Replica, sorted in ascending order */
                    search?: string;
                    /** @description Filters by tags associated to Replicas */
                    tags?: ("AI" | "Academic" | "Arts" | "Blockchain" | "Business" | "Celebrity" | "Charity" | "Developer" | "Educator" | "Europe" | "Fashion" | "Finance" | "Food" | "Health & Fitness" | "History" | "Italian" | "Kids" | "Language" | "Law" | "Leadership" | "Lifestyle" | "Literature" | "Love" | "Military" | "Modelling" | "Motivation" | "Movies" | "Music" | "North America" | "Philosophy" | "Politics" | "Religion" | "Science" | "Self-Help" | "Sensay" | "Sports" | "Technology" | "Web" | "Wisdom" | "blockchain" | "engage2earn" | "female" | "investment" | "male" | "meme" | "miniapp" | "telegram" | "web3")[];
                    /** @description Sorts by name or popularity of Replicas in ascending order */
                    sort?: "name" | "popularity";
                    /** @description Filters by integration */
                    integration?: "telegram" | "discord";
                };
                header?: {
                    "X-API-Version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of Replicas */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            /**
                             * @description Array of replica items for the current page. Will be an empty array if no items exist.
                             * @example [
                             *       {
                             *         "uuid": "123e4567-e89b-12d3-a456-426614174000",
                             *         "name": "Example Replica",
                             *         "purpose": "Replica purpose",
                             *         "slug": "copy",
                             *         "profile_image": "https://deprecated.invalid/image.png",
                             *         "profileImage": "https://domain.example/image.webp",
                             *         "short_description": "An example replica",
                             *         "shortDescription": "An example replica",
                             *         "introduction": "deprecated",
                             *         "greeting": "What would you like to know?",
                             *         "tags": [
                             *           "male",
                             *           "italian"
                             *         ],
                             *         "created_at": "2023-10-01T12:00:00Z",
                             *         "owner_uuid": "123e4567-e89b-12d3-a456-426614174001",
                             *         "ownerID": "a-user-id",
                             *         "type": "character",
                             *         "private": false,
                             *         "whitelistEmails": [
                             *           "example@domain.example"
                             *         ],
                             *         "suggestedQuestions": [
                             *           "What is the meaning of life?"
                             *         ],
                             *         "llm": {
                             *           "model": "gpt-4o",
                             *           "systemMessage": "Concise, knowledgeable, empathetic and cheerful.",
                             *           "tools": [
                             *             "answerToLife"
                             *           ]
                             *         },
                             *         "voice_enabled": true,
                             *         "video_enabled": true,
                             *         "chat_history_count": 5,
                             *         "system_message": "Descriptive, energetic, friendly",
                             *         "elevenLabsID": "ABC123XYZ456",
                             *         "telegram_integration": {
                             *           "token": "YOUR_TELEGRAM_BOT_TOKEN_HERE",
                             *           "service_name": "test_telegram_bot"
                             *         },
                             *         "discord_integration": {
                             *           "token": "YOUR_DISCORD_BOT_TOKEN_HERE",
                             *           "service_name": "test_discord_bot",
                             *           "is_active": true
                             *         }
                             *       }
                             *     ]
                             */
                            items: {
                                /**
                                 * @description The name of the replica.
                                 * @example John Smith
                                 */
                                name: string;
                                /**
                                 * @description The purpose of the replica. This field is not used for training the replica.
                                 * @example Acts as my AI twin for answering questions about my creative work.
                                 */
                                purpose?: string;
                                /**
                                 * @description A short description of your replica. This field is not used for training the replica.
                                 * @example Accountant from Brooklyn who loves sports.
                                 */
                                shortDescription: string;
                                /**
                                 * @description The first thing your replica will say when you start a conversation with them.
                                 * @example What would you like to know?
                                 */
                                greeting: string;
                                /**
                                 * @description The replica type.
                                 *     `individual`: A replica of yourself.
                                 *     `character`: A replica of a character: can be anything you want.
                                 *     `brand`: A replica of a business persona or organization.
                                 *
                                 * @default character
                                 * @enum {string}
                                 */
                                type: "individual" | "character" | "brand";
                                /**
                                 * @description The replica owner ID.
                                 * @example a-user-id
                                 */
                                ownerID: string;
                                /**
                                 * @description Visibility of the replica. When set to `true`, only the owner and users on the allowlist will be able to find the replica and chat with it.
                                 * @default false
                                 */
                                private: boolean;
                                /**
                                 * @description Emails of users who can use the replica when the replica is private.
                                 * @default []
                                 * @example [
                                 *       "user@domain.example"
                                 *     ]
                                 */
                                whitelistEmails: string[];
                                /**
                                 * @description The slug of the replica. Slugs can be used by API consumers to determine the URLs where replicas can be found.
                                 * @example example-replica
                                 */
                                slug: string;
                                /**
                                 * @description The tags associated with the replica. Tags help categorize replicas and make them easier to find.
                                 * @default []
                                 * @example [
                                 *       "male",
                                 *       "italian"
                                 *     ]
                                 */
                                tags: string[];
                                /**
                                 * Format: uri
                                 * @description The URL of the profile image of the replica. The image will be downloaded, optimized and stored on our servers, so the URL in the response will be different. Supported formats: .jpg, .jpeg, .png, .bmp, .webp, .avif
                                 * @default https://studio.sensay.io/assets/default-replica-profile.webp
                                 * @example https://images.invalid/photo.jpeg
                                 */
                                profileImage: string;
                                /**
                                 * @description Suggested questions when starting a conversation.
                                 * @default []
                                 * @example [
                                 *       "What is the meaning of life?"
                                 *     ]
                                 */
                                suggestedQuestions: string[];
                                llm: {
                                    /**
                                     * @description The LLM model of the replica.
                                     * @default claude-3-5-haiku-latest
                                     * @example gpt-4o
                                     */
                                    model: ("gpt-4o" | "claude-3-5-haiku-latest" | "claude-3-7-sonnet-latest" | "claude-4-sonnet-20250514" | "grok-3-latest" | "grok-4-latest" | "deepseek-chat" | "o3-mini" | "gpt-4o-mini" | "huggingface-eva" | "huggingface-dolphin-llama" | "asi1-mini" | "targon-gpt-oss-120b" | "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gemini-2.5-flash" | "gemini-2.5-pro") | "grok-2-latest" | "grok-3-beta";
                                    /**
                                     * @deprecated
                                     * @description Deprecated. The system will automatically choose the best approach.
                                     * @default rag-search
                                     * @enum {string}
                                     */
                                    memoryMode: "prompt-caching" | "rag-search";
                                    /**
                                     * @description Who is your replica? How do you want it to talk, respond and act.
                                     * @example Concise, knowledgeable, empathetic and cheerful.
                                     */
                                    systemMessage?: string;
                                    /**
                                     * @description The replica's tools. Tools enable agents to interact with the world. `getTokenInfo`: Allows replica to get token information
                                     *
                                     * @default []
                                     * @example [
                                     *       "getTokenInfo"
                                     *     ]
                                     */
                                    tools: ("getTokenInfo" | "getUdaoTokenInfo" | "getSensayTokenInfo" | "getTokenInfoMEAI" | "answerToLife" | "toolhouse" | "brightUnionGetQuoteTool" | "brightUnionGetCoverablesTool")[];
                                };
                                /**
                                 * @description Text that can be used to generate a voice preview.
                                 * @example Hi, I'm your Sensay replica! How can I assist you today?
                                 */
                                voicePreviewText?: string;
                                /**
                                 * @deprecated
                                 * @description Whether the replica conversations are accessible to customer support
                                 * @example true
                                 */
                                isAccessibleByCustomerSupport?: boolean;
                                /**
                                 * @description Whether the replica conversations are accessible to customer support
                                 * @example true
                                 */
                                isEveryConversationAccessibleBySupport?: boolean;
                                /**
                                 * @deprecated
                                 * @description Whether private conversations are enabled for this replica (conversations not accessible to customer support)
                                 * @default true
                                 * @example false
                                 */
                                isPrivateConversationsEnabled: boolean;
                                /**
                                 * @description Introductory audio ID maintained and stored by the consumer of the API, not in the API ecosystem itself. Used for keeping track of introductory audio IDs.
                                 * @example intro_audio_123
                                 */
                                introductionAudioID?: string | null;
                                /**
                                 * Format: uuid
                                 * @description The replica UUID
                                 * @example 4830597b-f3be-42b4-9587-fa15299ccd63
                                 */
                                uuid: string;
                                /** @description The ElevenLabs voice ID associated with this replica. */
                                elevenLabsID?: string;
                                /** @description The ElevenLabs custom voice ID associated with this replica. */
                                elevenLabsCustomID?: string;
                                /** @description The HeyGen avatar ID associated with this replica. */
                                heygenAvatarID?: string;
                                /**
                                 * @description The ElevenLabs voice ID associated with this replica.
                                 * @enum {string}
                                 */
                                voiceManager?: "sensay" | "elevenlabs";
                                /**
                                 * @description The distilled knowledge of the replica
                                 * @example This is the distilled knowledge of the replica.
                                 */
                                distilledKnowledge?: string;
                                /**
                                 * @deprecated
                                 * @description The URL of the profile image of the replica. Please use `profileImage` instead.
                                 */
                                profile_image: string | null;
                                /**
                                 * @deprecated
                                 * @description The description of the replica. Please use `shortDescription` instead.
                                 */
                                short_description: string | null;
                                /**
                                 * @deprecated
                                 * @description The introduction of the replica. Please use `greeting` instead.
                                 */
                                introduction: string | null;
                                /**
                                 * Format: date-time
                                 * @description The date and time the replica was created.
                                 */
                                created_at: string | null;
                                /**
                                 * Format: uuid
                                 * @deprecated
                                 * @description The UUID of the owner of the replica. Please migrate to the new User ID system and use `ownerID` instead.
                                 */
                                owner_uuid: string | null;
                                /** @description Whether the replica has voice support. */
                                voice_enabled: boolean;
                                /** @description Whether the replica has video support. */
                                video_enabled: boolean;
                                /** @description The total number of chat history items related to this replica, for all users of the organization. */
                                chat_history_count: number | null;
                                /**
                                 * @deprecated
                                 * @description The replica's tone, personality and behaviour, Please use `llm.systemMessage` instead.
                                 */
                                system_message: string;
                                /** @description The Discord integration of the replica. */
                                discord_integration: {
                                    token: string | null;
                                    service_name: string | null;
                                    is_active: boolean | null;
                                } | null;
                                /** @description The Telegram integration of the replica. */
                                telegram_integration: {
                                    token: string | null;
                                    service_name: string | null;
                                } | null;
                            }[];
                            /**
                             * @description The total number of replica items available across all pages
                             * @example 100
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a replica
         * @description Creates a new replica.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The name of the replica.
                         * @example John Smith
                         */
                        name: string;
                        /**
                         * @description The purpose of the replica. This field is not used for training the replica.
                         * @example Acts as my AI twin for answering questions about my creative work.
                         */
                        purpose?: string;
                        /**
                         * @description A short description of your replica. This field is not used for training the replica.
                         * @example Accountant from Brooklyn who loves sports.
                         */
                        shortDescription: string;
                        /**
                         * @description The first thing your replica will say when you start a conversation with them.
                         * @example What would you like to know?
                         */
                        greeting: string;
                        /**
                         * @description The replica type.
                         *     `individual`: A replica of yourself.
                         *     `character`: A replica of a character: can be anything you want.
                         *     `brand`: A replica of a business persona or organization.
                         *
                         * @default character
                         * @enum {string}
                         */
                        type?: "individual" | "character" | "brand";
                        /**
                         * @description The replica owner ID.
                         * @example a-user-id
                         */
                        ownerID: string;
                        /**
                         * @description Visibility of the replica. When set to `true`, only the owner and users on the allowlist will be able to find the replica and chat with it.
                         * @default false
                         */
                        private?: boolean;
                        /**
                         * @description Emails of users who can use the replica when the replica is private.
                         * @default []
                         * @example [
                         *       "user@domain.example"
                         *     ]
                         */
                        whitelistEmails?: string[];
                        /**
                         * @description The slug of the replica. Slugs can be used by API consumers to determine the URLs where replicas can be found.
                         * @example example-replica
                         */
                        slug: string;
                        /**
                         * @description The tags associated with the replica. Tags help categorize replicas and make them easier to find.
                         * @default []
                         * @example [
                         *       "male",
                         *       "italian"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * Format: uri
                         * @description The URL of the profile image of the replica. The image will be downloaded, optimized and stored on our servers, so the URL in the response will be different. Supported formats: .jpg, .jpeg, .png, .bmp, .webp, .avif
                         * @default https://studio.sensay.io/assets/default-replica-profile.webp
                         * @example https://images.invalid/photo.jpeg
                         */
                        profileImage?: string;
                        /**
                         * @description Suggested questions when starting a conversation.
                         * @default []
                         * @example [
                         *       "What is the meaning of life?"
                         *     ]
                         */
                        suggestedQuestions?: string[];
                        llm: {
                            /**
                             * @description The LLM model of the replica.
                             * @default claude-3-5-haiku-latest
                             * @example gpt-4o
                             */
                            model?: ("gpt-4o" | "claude-3-5-haiku-latest" | "claude-3-7-sonnet-latest" | "claude-4-sonnet-20250514" | "grok-3-latest" | "grok-4-latest" | "deepseek-chat" | "o3-mini" | "gpt-4o-mini" | "huggingface-eva" | "huggingface-dolphin-llama" | "asi1-mini" | "targon-gpt-oss-120b" | "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gemini-2.5-flash" | "gemini-2.5-pro") | "grok-2-latest" | "grok-3-beta";
                            /**
                             * @deprecated
                             * @description Deprecated. The system will automatically choose the best approach.
                             * @default rag-search
                             * @enum {string}
                             */
                            memoryMode?: "prompt-caching" | "rag-search";
                            /**
                             * @description Who is your replica? How do you want it to talk, respond and act.
                             * @example Concise, knowledgeable, empathetic and cheerful.
                             */
                            systemMessage?: string;
                            /**
                             * @description The replica's tools. Tools enable agents to interact with the world. `getTokenInfo`: Allows replica to get token information
                             *
                             * @default []
                             * @example [
                             *       "getTokenInfo"
                             *     ]
                             */
                            tools?: ("getTokenInfo" | "getUdaoTokenInfo" | "getSensayTokenInfo" | "getTokenInfoMEAI" | "answerToLife" | "toolhouse" | "brightUnionGetQuoteTool" | "brightUnionGetCoverablesTool")[];
                        };
                        /**
                         * @description Text that can be used to generate a voice preview.
                         * @example Hi, I'm your Sensay replica! How can I assist you today?
                         */
                        voicePreviewText?: string;
                        /**
                         * @deprecated
                         * @description Whether the replica conversations are accessible to customer support
                         * @example true
                         */
                        isAccessibleByCustomerSupport?: boolean;
                        /**
                         * @description Whether the replica conversations are accessible to customer support
                         * @example true
                         */
                        isEveryConversationAccessibleBySupport?: boolean;
                        /**
                         * @deprecated
                         * @description Whether private conversations are enabled for this replica (conversations not accessible to customer support)
                         * @default true
                         * @example false
                         */
                        isPrivateConversationsEnabled?: boolean;
                        /**
                         * @description Introductory audio ID maintained and stored by the consumer of the API, not in the API ecosystem itself. Used for keeping track of introductory audio IDs.
                         * @example intro_audio_123
                         */
                        introductionAudioID?: string | null;
                    };
                };
            };
            responses: {
                /** @description The created replica */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Indicates if the replica was created successfully
                             * @example true
                             */
                            success: boolean;
                            /**
                             * Format: uuid
                             * @description The replica UUID
                             * @example 654c2874-0b43-4d84-85fc-62ba866da1cb
                             */
                            uuid: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/api-keys/invites/{code}/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem an API key invitation
         * @description
         *       If you have an invitation code, you can redeem it to create an Organization and an API key associated with it.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The name of the organization you want to create. */
                        organizationName: string;
                        /** @description The name of the point of contact for the API subscription. */
                        name: string;
                        /**
                         * Format: email
                         * @description The email of the point of contact for the API subscription.
                         */
                        email: string;
                    };
                };
            };
            responses: {
                /** @description Details about the created Organization and API Key. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            /** @description The API key you will need to use to authenticate your requests. The key cannot be retrieved again after it is created: keep it safe. */
                            apiKey: string;
                            /** @description The ID of the organization you have just created. You will need this ID to communicate with our team. Keep it safe. */
                            organizationID: string;
                            /** @description The date until which the API subscroption is valid. */
                            validUntil: string | null;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chat history
         * @description List chat history items of a Replica belonging to the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List the chat history of the replica by the currently logged in user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            items?: {
                                /**
                                 * @description The content of the message
                                 * @example Hello
                                 */
                                content: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                created_at: string;
                                /**
                                 * @description The ID of the message
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Whether the replica is private
                                 * @example false
                                 */
                                is_private: boolean;
                                /**
                                 * @description The role of the message
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description From which platform is message was sent from
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /** @description The sources of information used to create the response via RAG (Retrieval-Augmented Generation) */
                                sources: {
                                    /**
                                     * @description The ID of the source
                                     * @example 123
                                     */
                                    id: number;
                                    /**
                                     * @description Relevance score of the source
                                     * @example 0.9
                                     */
                                    score: number;
                                    /**
                                     * @description If the source has ever been scored or not
                                     * @example scored
                                     * @enum {string}
                                     */
                                    status: "scored" | "unscored";
                                    /**
                                     * Format: date-time
                                     * @description When the source was created
                                     * @example 2024-03-15T14:30:00.000Z
                                     */
                                    created_at: string;
                                    /**
                                     * @description The name of the source
                                     * @example Q: Next, what’s your nationality?
                                     */
                                    name: string;
                                    /**
                                     * @description The actual content retrieved from the source
                                     * @example Next, what’s your nationality? Mars
                                     */
                                    content: string;
                                }[];
                                /**
                                 * @description The UUID of the user
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                user_uuid: string;
                                /**
                                 * @deprecated
                                 * @description The ID of the message from the LLM. Present when role is assistant. Will be removed in the future.
                                 * @example msg-GbsIAyNcNZCMAaDET3zXhInw
                                 */
                                original_message_id: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a chat history entry
         * @description Save chat history items of a Replica belonging to the logged in user.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Content of the message
                         * @example How did you handle the immense pressure during the Civil War?
                         */
                        content: string;
                        /**
                         * @description The place where the conversation is happening, which informs where the message should be saved in the chat history.
                         * @enum {string}
                         */
                        source?: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                        /** @description Discord information about the message */
                        discord_data?: {
                            /** @description Channel ID */
                            channel_id: string;
                            /** @description Channel name */
                            channel_name: string;
                            /** @description Author ID */
                            author_id: string;
                            /** @description Author name */
                            author_name: string;
                            /** @description Message ID */
                            message_id: string;
                            /** @description Message creation timestamp */
                            created_at?: string;
                            /** @description Server ID */
                            server_id?: string;
                            /** @description Server name */
                            server_name?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Saves the chat history of the replica by the currently logged in user. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/history/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Telegram chat history
         * @description List telegram chat history items of a Replica belonging to the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List the chat history of the replica by the currently logged in user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            items?: {
                                /**
                                 * @description The content of the message
                                 * @example Hello
                                 */
                                content: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                created_at: string;
                                /**
                                 * @description The ID of the message
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Whether the replica is private
                                 * @example false
                                 */
                                is_private: boolean;
                                /**
                                 * @description The role of the message
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description From which platform is message was sent from
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /** @description The sources of information used to create the response via RAG (Retrieval-Augmented Generation) */
                                sources: {
                                    /**
                                     * @description The ID of the source
                                     * @example 123
                                     */
                                    id: number;
                                    /**
                                     * @description Relevance score of the source
                                     * @example 0.9
                                     */
                                    score: number;
                                    /**
                                     * @description If the source has ever been scored or not
                                     * @example scored
                                     * @enum {string}
                                     */
                                    status: "scored" | "unscored";
                                    /**
                                     * Format: date-time
                                     * @description When the source was created
                                     * @example 2024-03-15T14:30:00.000Z
                                     */
                                    created_at: string;
                                    /**
                                     * @description The name of the source
                                     * @example Q: Next, what’s your nationality?
                                     */
                                    name: string;
                                    /**
                                     * @description The actual content retrieved from the source
                                     * @example Next, what’s your nationality? Mars
                                     */
                                    content: string;
                                }[];
                                /**
                                 * @description The UUID of the user
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                user_uuid: string;
                                /**
                                 * @deprecated
                                 * @description The ID of the message from the LLM. Present when role is assistant. Will be removed in the future.
                                 * @example msg-GbsIAyNcNZCMAaDET3zXhInw
                                 */
                                original_message_id: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a Telegram chat history entry
         * @description Save chat history items of a Replica belonging to the logged in user.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Content of the message
                         * @example How did you handle the immense pressure during the Civil War?
                         */
                        content: string;
                        /** @description Telegram information about the message */
                        telegram_data: {
                            /** @description Type of the chat, can be either `private`, `group`, `supergroup` or `channel`. */
                            chat_type: string;
                            /** @description Unique identifier for this chat. */
                            chat_id: number;
                            /** @description Name of the chat (group name, channel title, or user display name for private chats). */
                            chat_name?: string;
                            /** @description Sender of the message's userID; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats. */
                            user_id?: number;
                            /** @description Sender of the message's username; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats. */
                            username?: string;
                            /** @description Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat). */
                            message_id: number;
                            /** @description Unique identifier of a message thread or a forum topic to which the message belongs; for supergroups only. */
                            message_thread_id?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description Saves the chat history of the replica by the currently logged in user. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/history/discord": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Discord chat history
         * @description List discord chat history items of a Replica belonging to the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List the chat history of the replica by the currently logged in user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            items?: {
                                /**
                                 * @description The content of the message
                                 * @example Hello
                                 */
                                content: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                created_at: string;
                                /**
                                 * @description The ID of the message
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Whether the replica is private
                                 * @example false
                                 */
                                is_private: boolean;
                                /**
                                 * @description The role of the message
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description From which platform is message was sent from
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /** @description The sources of information used to create the response via RAG (Retrieval-Augmented Generation) */
                                sources: {
                                    /**
                                     * @description The ID of the source
                                     * @example 123
                                     */
                                    id: number;
                                    /**
                                     * @description Relevance score of the source
                                     * @example 0.9
                                     */
                                    score: number;
                                    /**
                                     * @description If the source has ever been scored or not
                                     * @example scored
                                     * @enum {string}
                                     */
                                    status: "scored" | "unscored";
                                    /**
                                     * Format: date-time
                                     * @description When the source was created
                                     * @example 2024-03-15T14:30:00.000Z
                                     */
                                    created_at: string;
                                    /**
                                     * @description The name of the source
                                     * @example Q: Next, what’s your nationality?
                                     */
                                    name: string;
                                    /**
                                     * @description The actual content retrieved from the source
                                     * @example Next, what’s your nationality? Mars
                                     */
                                    content: string;
                                }[];
                                /**
                                 * @description The UUID of the user
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                user_uuid: string;
                                /**
                                 * @deprecated
                                 * @description The ID of the message from the LLM. Present when role is assistant. Will be removed in the future.
                                 * @example msg-GbsIAyNcNZCMAaDET3zXhInw
                                 */
                                original_message_id: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/history/web": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Web chat history
         * @description List web chat history items of a Replica belonging to the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List the chat history of the replica by the currently logged in user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            items?: {
                                /**
                                 * @description The content of the message
                                 * @example Hello
                                 */
                                content: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                created_at: string;
                                /**
                                 * @description The ID of the message
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Whether the replica is private
                                 * @example false
                                 */
                                is_private: boolean;
                                /**
                                 * @description The role of the message
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description From which platform is message was sent from
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /** @description The sources of information used to create the response via RAG (Retrieval-Augmented Generation) */
                                sources: {
                                    /**
                                     * @description The ID of the source
                                     * @example 123
                                     */
                                    id: number;
                                    /**
                                     * @description Relevance score of the source
                                     * @example 0.9
                                     */
                                    score: number;
                                    /**
                                     * @description If the source has ever been scored or not
                                     * @example scored
                                     * @enum {string}
                                     */
                                    status: "scored" | "unscored";
                                    /**
                                     * Format: date-time
                                     * @description When the source was created
                                     * @example 2024-03-15T14:30:00.000Z
                                     */
                                    created_at: string;
                                    /**
                                     * @description The name of the source
                                     * @example Q: Next, what’s your nationality?
                                     */
                                    name: string;
                                    /**
                                     * @description The actual content retrieved from the source
                                     * @example Next, what’s your nationality? Mars
                                     */
                                    content: string;
                                }[];
                                /**
                                 * @description The UUID of the user
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                user_uuid: string;
                                /**
                                 * @deprecated
                                 * @description The ID of the message from the LLM. Present when role is assistant. Will be removed in the future.
                                 * @example msg-GbsIAyNcNZCMAaDET3zXhInw
                                 */
                                original_message_id: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/history/embed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Embed chat history
         * @description List embed chat history items of a Replica belonging to the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List the chat history of the replica by the currently logged in user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            type: string;
                            items?: {
                                /**
                                 * @description The content of the message
                                 * @example Hello
                                 */
                                content: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                created_at: string;
                                /**
                                 * @description The ID of the message
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Whether the replica is private
                                 * @example false
                                 */
                                is_private: boolean;
                                /**
                                 * @description The role of the message
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description From which platform is message was sent from
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /** @description The sources of information used to create the response via RAG (Retrieval-Augmented Generation) */
                                sources: {
                                    /**
                                     * @description The ID of the source
                                     * @example 123
                                     */
                                    id: number;
                                    /**
                                     * @description Relevance score of the source
                                     * @example 0.9
                                     */
                                    score: number;
                                    /**
                                     * @description If the source has ever been scored or not
                                     * @example scored
                                     * @enum {string}
                                     */
                                    status: "scored" | "unscored";
                                    /**
                                     * Format: date-time
                                     * @description When the source was created
                                     * @example 2024-03-15T14:30:00.000Z
                                     */
                                    created_at: string;
                                    /**
                                     * @description The name of the source
                                     * @example Q: Next, what’s your nationality?
                                     */
                                    name: string;
                                    /**
                                     * @description The actual content retrieved from the source
                                     * @example Next, what’s your nationality? Mars
                                     */
                                    content: string;
                                }[];
                                /**
                                 * @description The UUID of the user
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                user_uuid: string;
                                /**
                                 * @deprecated
                                 * @description The ID of the message from the LLM. Present when role is assistant. Will be removed in the future.
                                 * @example msg-GbsIAyNcNZCMAaDET3zXhInw
                                 */
                                original_message_id: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description The replica specified could not be found or you do not have access to it */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a completion
         * @description
         *       Ask for a completion and stores the prompt in the chat history.
         *
         *       Replica chat supports two response formats: streamed and JSON. To switch between these formats, use the 'Accept' header, specifying either 'text/event-stream' for streaming or 'application/json' for JSON.
         *       The streamed response honours the [Stream Protocol](https://sdk.vercel.ai/docs/ai-sdk-ui/stream-protocol), allowing the use of a number of SDKs, including [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction).
         *
         *       The streamed variant is not specified in the OpenAPI Schema because it is not an OpenAPI endpoint.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The prompt to generate completions for, encoded as a string.
                         * @example How did you handle the immense pressure during the Civil War?
                         */
                        content: string;
                        /**
                         * @description When set to true, historical messages are not used in the context, and the message is not appended to the conversation history, thus it is excluded from all future chat context.
                         * @default false
                         */
                        skip_chat_history?: boolean;
                        /**
                         * @description The place where the conversation is happening, which informs where the message should be saved in the chat history.
                         * @enum {string}
                         */
                        source?: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                        /** @description Discord information about the message */
                        discord_data?: {
                            /** @description Channel ID */
                            channel_id: string;
                            /** @description Channel name */
                            channel_name: string;
                            /** @description Author ID */
                            author_id: string;
                            /** @description Author name */
                            author_name: string;
                            /** @description Message ID */
                            message_id: string;
                            /** @description Message creation timestamp */
                            created_at?: string;
                            /** @description Server ID */
                            server_id?: string;
                            /** @description Server name */
                            server_name?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description List of chat messages had with a replica by the current user, including the completion */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            content: string;
                        };
                        "text/event-stream": {
                            success: boolean;
                            content: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/chat/completions/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a Telegram completion
         * @description
         *         Ask for a completion and stores the prompt in the chat history.
         *
         *         Replica chat supports two response formats: streamed and JSON. To switch between these formats, use the 'Accept' header, specifying either 'text/event-stream' for streaming or 'application/json' for JSON.
         *         The streamed response honours the [Stream Protocol](https://sdk.vercel.ai/docs/ai-sdk-ui/stream-protocol), allowing the use of a number of SDKs, including [Vercel AI SDK](https://sdk.vercel.ai/docs/introduction).
         *
         *         The streamed variant is not specified in the OpenAPI Schema because it is not an OpenAPI endpoint.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The prompt to generate completions for, encoded as a string.
                         * @example How did you handle the immense pressure during the Civil War?
                         */
                        content: string;
                        /**
                         * @description When set to true, historical messages are not used in the context, and the message is not appended to the conversation history, thus it is excluded from all future chat context.
                         * @default false
                         */
                        skip_chat_history?: boolean;
                        /**
                         * Format: uri
                         * @description The URL of the image to be used as context for the completion.
                         * @example https://images.invalid/photo.jpeg
                         */
                        imageURL?: string;
                        /** @description Telegram information about the message */
                        telegram_data: {
                            /** @description Type of the chat, can be either `private`, `group`, `supergroup` or `channel`. */
                            chat_type: string;
                            /** @description Unique identifier for this chat. */
                            chat_id: number;
                            /** @description Name of the chat (group name, channel title, or user display name for private chats). */
                            chat_name?: string;
                            /** @description Sender of the message's userID; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats. */
                            user_id?: number;
                            /** @description Sender of the message's username; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats. */
                            username?: string;
                            /** @description Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat). */
                            message_id: number;
                            /** @description Unique identifier of a message thread or a forum topic to which the message belongs; for supergroups only. */
                            message_thread_id?: number;
                        };
                    };
                };
            };
            responses: {
                /** @description List of chat messages had with a replica by the current user, including the completion */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            content: string;
                        };
                        "text/event-stream": {
                            success: boolean;
                            content: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/experimental/replicas/{replicaUUID}/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a completion (OpenAI-compatible, non-streaming)
         * @description
         *       > warn
         *       > Limited [OpenAI Chat Completions API](https://platform.openai.com/docs/api-reference/chat/create) compatibility.
         *       > Supports basic chat completion with standard message roles and JSON responses.
         *       > Not supported: OpenAI-style streaming, tool calls, stop sequences, logprobs, and most request parameters.
         *
         *       Creates a chat completion response from a list of messages comprising a conversation.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A list of messages that make up the conversation context. Only the last message is used for completion.
                         * @example [
                         *       {
                         *         "role": "system",
                         *         "content": "You are a helpful assistant."
                         *       },
                         *       {
                         *         "role": "user",
                         *         "content": "How did you handle the immense pressure during the Civil War?"
                         *       }
                         *     ]
                         */
                        messages: {
                            /**
                             * @description The role of the message author. Can be "assistant", "developer", "system", "tool", or "user".
                             * @example user
                             * @enum {string}
                             */
                            role: "assistant" | "developer" | "system" | "tool" | "user";
                            /**
                             * @description The content of the message.
                             * @example How did you handle the immense pressure during the Civil War?
                             */
                            content: string;
                            /**
                             * @description An optional name for the participant. Provides the model information to differentiate between participants of the same role.
                             * @example example_user
                             */
                            name?: string;
                        }[];
                        /**
                         * @description When set to false, historical messages are not used in the context, and the message is not appended to the conversation history.
                         * @default true
                         * @example true
                         */
                        store?: boolean;
                        /**
                         * @description The place where the conversation is happening, which informs where the message should be saved in the chat history if `store` is true.
                         * @default web
                         * @example web
                         * @enum {string}
                         */
                        source?: "discord" | "embed" | "web";
                        /** @description Discord information about the message */
                        discord_data?: {
                            /** @description Channel ID */
                            channel_id: string;
                            /** @description Channel name */
                            channel_name: string;
                            /** @description Author ID */
                            author_id: string;
                            /** @description Author name */
                            author_name: string;
                            /** @description Message ID */
                            message_id: string;
                            /** @description Message creation timestamp */
                            created_at?: string;
                            /** @description Server ID */
                            server_id?: string;
                            /** @description Server name */
                            server_name?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Chat completion response in OpenAI compatible format */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description A unique identifier for the chat completion.
                             * @example chatcmpl-abc123
                             */
                            id: string;
                            /**
                             * @description The Unix timestamp (in seconds) of when the chat completion was created.
                             * @example 1677858242
                             */
                            created: number;
                            /**
                             * @description The object type, which is always "chat.completion"
                             * @example chat.completion
                             * @enum {string}
                             */
                            object: "chat.completion";
                            /**
                             * @description The model used for the chat completion.
                             * @example o1
                             */
                            model: string;
                            /** @description An array of chat completion choices. */
                            choices: {
                                /**
                                 * @description The index of the choice in the array.
                                 * @example 0
                                 */
                                index: number;
                                /** @description The message generated by the model. */
                                message: {
                                    /**
                                     * @description The role of the message author, which is always "assistant" for completions.
                                     * @example assistant
                                     * @enum {string}
                                     */
                                    role: "assistant";
                                    /**
                                     * @description The content of the message.
                                     * @example During the Civil War, I faced tremendous pressure...
                                     */
                                    content: string;
                                    /** @description The tool calls generated by the model, such as function calls. */
                                    tool_calls?: unknown[];
                                };
                                /** @description Log probabilities for token generation if requested. */
                                logprobs?: unknown;
                                /**
                                 * @description The reason the model stopped generating tokens.
                                 * @example stop
                                 * @enum {string}
                                 */
                                finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
                            }[];
                            /** @description Usage statistics for the completion request. */
                            usage: {
                                /**
                                 * @description Number of tokens in the prompt.
                                 * @example 56
                                 */
                                prompt_tokens: number;
                                /**
                                 * @description Number of tokens in the generated completion.
                                 * @example 31
                                 */
                                completion_tokens: number;
                                /**
                                 * @description Total number of tokens used (prompt + completion).
                                 * @example 87
                                 */
                                total_tokens: number;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user
         * @description Returns information about the current user.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: email
                             * @description The email address
                             * @example user@example.com
                             */
                            email?: string;
                            /**
                             * @description The ID of the user
                             * @example johndoe
                             */
                            id: string;
                            /** @description The linked accounts of the user */
                            linkedAccounts?: {
                                /** @description The account ID */
                                accountID: string;
                                /**
                                 * @description The account type
                                 * @example discord
                                 * @enum {string}
                                 */
                                accountType: "discord" | "telegram" | "embed";
                            }[];
                            /**
                             * @description The name of the user
                             * @example John Doe
                             */
                            name?: string;
                        };
                    };
                };
            };
        };
        /**
         * Update the current user
         * @description Update the currently logged in user.
         */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @description The email address
                         * @example user@example.com
                         */
                        email?: string;
                        /**
                         * @description The ID of the user
                         * @example johndoe
                         */
                        id: string;
                        /** @description The linked accounts of the user */
                        linkedAccounts?: {
                            /** @description The account ID */
                            accountID: string;
                            /**
                             * @description The account type
                             * @example discord
                             * @enum {string}
                             */
                            accountType: "discord" | "telegram" | "embed";
                        }[];
                        /**
                         * @description The name of the user (max 50 chars, letters/numbers/spaces and ( ) . , ' - /)
                         * @example John Doe
                         */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description The updated User entity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: email
                             * @description The email address
                             * @example user@example.com
                             */
                            email?: string;
                            /**
                             * @description The ID of the user
                             * @example johndoe
                             */
                            id: string;
                            /** @description The linked accounts of the user */
                            linkedAccounts?: {
                                /** @description The account ID */
                                accountID: string;
                                /**
                                 * @description The account type
                                 * @example discord
                                 * @enum {string}
                                 */
                                accountType: "discord" | "telegram" | "embed";
                            }[];
                            /**
                             * @description The name of the user
                             * @example John Doe
                             */
                            name?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Linked account or email already exists or is invalid */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete the current user
         * @description This endpoint permanently deletes the currently authenticated user account, including all associated data. After deletion, the account cannot be recovered.
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a user
         * @description Creates a new user.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @description The email address
                         * @example user@example.com
                         */
                        email?: string;
                        /** @description The ID of the user */
                        id?: string;
                        /** @description The linked accounts of the user */
                        linkedAccounts?: {
                            /** @description The account ID */
                            accountID: string;
                            /**
                             * @description The account type
                             * @example discord
                             * @enum {string}
                             */
                            accountType: "discord" | "telegram" | "embed";
                        }[];
                        /**
                         * @description The name of the user (max 50 chars, letters/numbers/spaces and ( ) . , ' - /)
                         * @example John Doe
                         */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description The created User entity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: email
                             * @description The email address
                             * @example user@example.com
                             */
                            email?: string;
                            /**
                             * @description The ID of the user
                             * @example johndoe
                             */
                            id: string;
                            /** @description The linked accounts of the user */
                            linkedAccounts?: {
                                /** @description The account ID */
                                accountID: string;
                                /**
                                 * @description The account type
                                 * @example discord
                                 * @enum {string}
                                 */
                                accountType: "discord" | "telegram" | "embed";
                            }[];
                            /**
                             * @description The name of the user
                             * @example John Doe
                             */
                            name?: string;
                        };
                    };
                };
                /** @description User, email, or linked account already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user by ID
         * @description Returns information about the user with the specified ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    userID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User entity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: email
                             * @description The email address
                             * @example user@example.com
                             */
                            email?: string;
                            /**
                             * @description The ID of the user
                             * @example johndoe
                             */
                            id: string;
                            /** @description The linked accounts of the user */
                            linkedAccounts?: {
                                /** @description The account ID */
                                accountID: string;
                                /**
                                 * @description The account type
                                 * @example discord
                                 * @enum {string}
                                 */
                                accountType: "discord" | "telegram" | "embed";
                            }[];
                            /**
                             * @description The name of the user
                             * @example John Doe
                             */
                            name?: string;
                        };
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/integrations/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a replica Telegram integration
         * @description Integrates a replica to Telegram. The default Sensay Telegram integration will run a bot for you until you delete the integration.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Telegram Bot ID */
                        telegram_token: string;
                        /** @description Telegram Bot Name */
                        mention: string;
                    };
                };
            };
            responses: {
                /** @description Telegram integration created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            id: number;
                        };
                    };
                };
                /** @description Telegram integration created successfully, but failed to notify the external integration server. If you are using the default Sensay Telegram Integration, we will retry starting the bot asynchronously. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            id: number;
                            /**
                             * @description The reason why the operation is accepted instead of returning an immediate success.
                             * @example Telegram integration created successfully, but failed to notify the external integration server. If you are using the default Sensay Telegram Integration, we will retry starting the bot asynchronously.
                             */
                            message: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        /**
         * Delete a replica Telegram integration
         * @description Removes a replica Telegram integration.
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Telegram integration deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                        };
                    };
                };
                /** @description Telegram integration deleted successfully, but failed to notify the external integration server. If you are using the default Sensay Telegram Integration, we will retry stopping the bot asynchronously. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /**
                             * @description The reason why the operation is accepted instead of returning an immediate success.
                             * @example Telegram integration deleted successfully, but failed to notify the external integration server. If you are using the default Sensay Telegram Integration, we will retry stopping the bot asynchronously.
                             */
                            message: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a replica
         * @description Get an existing replica.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested replica */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description The name of the replica.
                             * @example John Smith
                             */
                            name: string;
                            /**
                             * @description The purpose of the replica. This field is not used for training the replica.
                             * @example Acts as my AI twin for answering questions about my creative work.
                             */
                            purpose?: string;
                            /**
                             * @description A short description of your replica. This field is not used for training the replica.
                             * @example Accountant from Brooklyn who loves sports.
                             */
                            shortDescription: string;
                            /**
                             * @description The first thing your replica will say when you start a conversation with them.
                             * @example What would you like to know?
                             */
                            greeting: string;
                            /**
                             * @description The replica type.
                             *     `individual`: A replica of yourself.
                             *     `character`: A replica of a character: can be anything you want.
                             *     `brand`: A replica of a business persona or organization.
                             *
                             * @default character
                             * @enum {string}
                             */
                            type: "individual" | "character" | "brand";
                            /**
                             * @description The replica owner ID.
                             * @example a-user-id
                             */
                            ownerID: string;
                            /**
                             * @description Visibility of the replica. When set to `true`, only the owner and users on the allowlist will be able to find the replica and chat with it.
                             * @default false
                             */
                            private: boolean;
                            /**
                             * @description Emails of users who can use the replica when the replica is private.
                             * @default []
                             * @example [
                             *       "user@domain.example"
                             *     ]
                             */
                            whitelistEmails: string[];
                            /**
                             * @description The slug of the replica. Slugs can be used by API consumers to determine the URLs where replicas can be found.
                             * @example example-replica
                             */
                            slug: string;
                            /**
                             * @description The tags associated with the replica. Tags help categorize replicas and make them easier to find.
                             * @default []
                             * @example [
                             *       "male",
                             *       "italian"
                             *     ]
                             */
                            tags: string[];
                            /**
                             * Format: uri
                             * @description The URL of the profile image of the replica. The image will be downloaded, optimized and stored on our servers, so the URL in the response will be different. Supported formats: .jpg, .jpeg, .png, .bmp, .webp, .avif
                             * @default https://studio.sensay.io/assets/default-replica-profile.webp
                             * @example https://images.invalid/photo.jpeg
                             */
                            profileImage: string;
                            /**
                             * @description Suggested questions when starting a conversation.
                             * @default []
                             * @example [
                             *       "What is the meaning of life?"
                             *     ]
                             */
                            suggestedQuestions: string[];
                            llm: {
                                /**
                                 * @description The LLM model of the replica.
                                 * @default claude-3-5-haiku-latest
                                 * @example gpt-4o
                                 */
                                model: ("gpt-4o" | "claude-3-5-haiku-latest" | "claude-3-7-sonnet-latest" | "claude-4-sonnet-20250514" | "grok-3-latest" | "grok-4-latest" | "deepseek-chat" | "o3-mini" | "gpt-4o-mini" | "huggingface-eva" | "huggingface-dolphin-llama" | "asi1-mini" | "targon-gpt-oss-120b" | "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gemini-2.5-flash" | "gemini-2.5-pro") | "grok-2-latest" | "grok-3-beta";
                                /**
                                 * @deprecated
                                 * @description Deprecated. The system will automatically choose the best approach.
                                 * @default rag-search
                                 * @enum {string}
                                 */
                                memoryMode: "prompt-caching" | "rag-search";
                                /**
                                 * @description Who is your replica? How do you want it to talk, respond and act.
                                 * @example Concise, knowledgeable, empathetic and cheerful.
                                 */
                                systemMessage?: string;
                                /**
                                 * @description The replica's tools. Tools enable agents to interact with the world. `getTokenInfo`: Allows replica to get token information
                                 *
                                 * @default []
                                 * @example [
                                 *       "getTokenInfo"
                                 *     ]
                                 */
                                tools: ("getTokenInfo" | "getUdaoTokenInfo" | "getSensayTokenInfo" | "getTokenInfoMEAI" | "answerToLife" | "toolhouse" | "brightUnionGetQuoteTool" | "brightUnionGetCoverablesTool")[];
                            };
                            /**
                             * @description Text that can be used to generate a voice preview.
                             * @example Hi, I'm your Sensay replica! How can I assist you today?
                             */
                            voicePreviewText?: string;
                            /**
                             * @deprecated
                             * @description Whether the replica conversations are accessible to customer support
                             * @example true
                             */
                            isAccessibleByCustomerSupport?: boolean;
                            /**
                             * @description Whether the replica conversations are accessible to customer support
                             * @example true
                             */
                            isEveryConversationAccessibleBySupport?: boolean;
                            /**
                             * @deprecated
                             * @description Whether private conversations are enabled for this replica (conversations not accessible to customer support)
                             * @default true
                             * @example false
                             */
                            isPrivateConversationsEnabled: boolean;
                            /**
                             * @description Introductory audio ID maintained and stored by the consumer of the API, not in the API ecosystem itself. Used for keeping track of introductory audio IDs.
                             * @example intro_audio_123
                             */
                            introductionAudioID?: string | null;
                            /**
                             * Format: uuid
                             * @description The replica UUID
                             * @example 4830597b-f3be-42b4-9587-fa15299ccd63
                             */
                            uuid: string;
                            /** @description The ElevenLabs voice ID associated with this replica. */
                            elevenLabsID?: string;
                            /** @description The ElevenLabs custom voice ID associated with this replica. */
                            elevenLabsCustomID?: string;
                            /** @description The HeyGen avatar ID associated with this replica. */
                            heygenAvatarID?: string;
                            /**
                             * @description The ElevenLabs voice ID associated with this replica.
                             * @enum {string}
                             */
                            voiceManager?: "sensay" | "elevenlabs";
                            /**
                             * @description The distilled knowledge of the replica
                             * @example This is the distilled knowledge of the replica.
                             */
                            distilledKnowledge?: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        /**
         * Updates a replica
         * @description Updates an existing replica.
         */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The name of the replica.
                         * @example John Smith
                         */
                        name: string;
                        /**
                         * @description The purpose of the replica. This field is not used for training the replica.
                         * @example Acts as my AI twin for answering questions about my creative work.
                         */
                        purpose?: string;
                        /**
                         * @description A short description of your replica. This field is not used for training the replica.
                         * @example Accountant from Brooklyn who loves sports.
                         */
                        shortDescription: string;
                        /**
                         * @description The first thing your replica will say when you start a conversation with them.
                         * @example What would you like to know?
                         */
                        greeting: string;
                        /**
                         * @description The replica type.
                         *     `individual`: A replica of yourself.
                         *     `character`: A replica of a character: can be anything you want.
                         *     `brand`: A replica of a business persona or organization.
                         *
                         * @default character
                         * @enum {string}
                         */
                        type?: "individual" | "character" | "brand";
                        /**
                         * @description The replica owner ID.
                         * @example a-user-id
                         */
                        ownerID: string;
                        /**
                         * @description Visibility of the replica. When set to `true`, only the owner and users on the allowlist will be able to find the replica and chat with it.
                         * @default false
                         */
                        private?: boolean;
                        /**
                         * @description Emails of users who can use the replica when the replica is private.
                         * @default []
                         * @example [
                         *       "user@domain.example"
                         *     ]
                         */
                        whitelistEmails?: string[];
                        /**
                         * @description The slug of the replica. Slugs can be used by API consumers to determine the URLs where replicas can be found.
                         * @example example-replica
                         */
                        slug: string;
                        /**
                         * @description The tags associated with the replica. Tags help categorize replicas and make them easier to find.
                         * @default []
                         * @example [
                         *       "male",
                         *       "italian"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * Format: uri
                         * @description The URL of the profile image of the replica. The image will be downloaded, optimized and stored on our servers, so the URL in the response will be different. Supported formats: .jpg, .jpeg, .png, .bmp, .webp, .avif
                         * @default https://studio.sensay.io/assets/default-replica-profile.webp
                         * @example https://images.invalid/photo.jpeg
                         */
                        profileImage?: string;
                        /**
                         * @description Suggested questions when starting a conversation.
                         * @default []
                         * @example [
                         *       "What is the meaning of life?"
                         *     ]
                         */
                        suggestedQuestions?: string[];
                        llm: {
                            /**
                             * @description The LLM model of the replica.
                             * @default claude-3-5-haiku-latest
                             * @example gpt-4o
                             */
                            model?: ("gpt-4o" | "claude-3-5-haiku-latest" | "claude-3-7-sonnet-latest" | "claude-4-sonnet-20250514" | "grok-3-latest" | "grok-4-latest" | "deepseek-chat" | "o3-mini" | "gpt-4o-mini" | "huggingface-eva" | "huggingface-dolphin-llama" | "asi1-mini" | "targon-gpt-oss-120b" | "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gemini-2.5-flash" | "gemini-2.5-pro") | "grok-2-latest" | "grok-3-beta";
                            /**
                             * @deprecated
                             * @description Deprecated. The system will automatically choose the best approach.
                             * @default rag-search
                             * @enum {string}
                             */
                            memoryMode?: "prompt-caching" | "rag-search";
                            /**
                             * @description Who is your replica? How do you want it to talk, respond and act.
                             * @example Concise, knowledgeable, empathetic and cheerful.
                             */
                            systemMessage?: string;
                            /**
                             * @description The replica's tools. Tools enable agents to interact with the world. `getTokenInfo`: Allows replica to get token information
                             *
                             * @default []
                             * @example [
                             *       "getTokenInfo"
                             *     ]
                             */
                            tools?: ("getTokenInfo" | "getUdaoTokenInfo" | "getSensayTokenInfo" | "getTokenInfoMEAI" | "answerToLife" | "toolhouse" | "brightUnionGetQuoteTool" | "brightUnionGetCoverablesTool")[];
                        };
                        /**
                         * @description Text that can be used to generate a voice preview.
                         * @example Hi, I'm your Sensay replica! How can I assist you today?
                         */
                        voicePreviewText?: string;
                        /**
                         * @deprecated
                         * @description Whether the replica conversations are accessible to customer support
                         * @example true
                         */
                        isAccessibleByCustomerSupport?: boolean;
                        /**
                         * @description Whether the replica conversations are accessible to customer support
                         * @example true
                         */
                        isEveryConversationAccessibleBySupport?: boolean;
                        /**
                         * @deprecated
                         * @description Whether private conversations are enabled for this replica (conversations not accessible to customer support)
                         * @default true
                         * @example false
                         */
                        isPrivateConversationsEnabled?: boolean;
                        /**
                         * @description Introductory audio ID maintained and stored by the consumer of the API, not in the API ecosystem itself. Used for keeping track of introductory audio IDs.
                         * @example intro_audio_123
                         */
                        introductionAudioID?: string | null;
                    };
                };
            };
            responses: {
                /** @description The request outcome */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Indicates if the replica was created successfully
                             * @example true
                             */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a replica
         * @description Deletes a replica by UUID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Replica has been deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Indicates if the replica was deleted successfully
                             * @example true
                             */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/conversations/{conversationUUID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get conversation details
         * @description Retrieve details for a specific conversation within a replica.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                    conversationUUID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Conversation details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uuid
                             * @description The conversation UUID.
                             * @example 8e9309af-baa4-4a85-8c59-c3a2a0c2ad0f
                             */
                            uuid: string;
                            /**
                             * @description The source of the conversation.
                             * @example telegram
                             * @enum {string}
                             */
                            source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                            /**
                             * @description The total number of messages in the conversation.
                             * @example 42
                             */
                            messageCount: number;
                            /**
                             * @description The total number of assistant replies in the conversation.
                             * @example 42
                             */
                            replicaReplyCount: number;
                            /**
                             * Format: date-time
                             * @description The timestamp of the first message in the conversation.
                             * @example 2025-05-27T15:02:44.499744+00:00
                             */
                            firstMessageAt?: string;
                            /**
                             * Format: date-time
                             * @description The timestamp of the last message in the conversation.
                             * @example 2025-05-27T15:02:44.499744+00:00
                             */
                            lastMessageAt?: string;
                            /**
                             * Format: date-time
                             * @description The timestamp of the last assistant reply in the conversation.
                             * @example 2025-05-27T15:02:44.499744+00:00
                             */
                            lastReplicaReplyAt?: string;
                            /**
                             * @description The name of the conversation. This can be the name of the user or the name of the group.
                             * @example John Doe
                             */
                            conversationName?: string;
                            /**
                             * @description The image URL of the conversation. This can be the profile image of the user or the group.
                             * @example https://example.com/image.png
                             */
                            conversationImageURL?: string;
                            /**
                             * @description A summary of the conversation.
                             * @example Discussion about blockchain technology and its applications in fintech.
                             */
                            summary: string;
                            /**
                             * @description Common questions asked in this conversation.
                             * @example [
                             *       "What is blockchain?",
                             *       "How does DeFi work?",
                             *       "What are smart contracts?"
                             *     ]
                             */
                            commonQuestions: string[];
                            /**
                             * @description Common topics discussed in this conversation.
                             * @example [
                             *       "blockchain",
                             *       "cryptocurrency",
                             *       "smart contracts",
                             *       "fintech"
                             *     ]
                             */
                            commonTopics: string[];
                            /**
                             * @description The type of conversation.
                             * @example individual
                             * @enum {string}
                             */
                            conversationType: "individual" | "group";
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List replica's conversations
         * @description List of replica's conversations with pagination and sorting.
         */
        get: {
            parameters: {
                query?: {
                    pageSize?: number | null;
                    page?: number;
                    sortBy?: "replicaReplies" | "firstMessageAt" | "lastReplicaReplyAt";
                    sortOrder?: "asc" | "desc";
                };
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of conversations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: {
                                /**
                                 * Format: uuid
                                 * @description The conversation UUID.
                                 * @example 8e9309af-baa4-4a85-8c59-c3a2a0c2ad0f
                                 */
                                uuid: string;
                                /**
                                 * @description The source of the conversation.
                                 * @example telegram
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /**
                                 * @description The total number of messages in the conversation.
                                 * @example 42
                                 */
                                messageCount: number;
                                /**
                                 * @description The total number of assistant replies in the conversation.
                                 * @example 42
                                 */
                                replicaReplyCount: number;
                                /**
                                 * Format: date-time
                                 * @description The timestamp of the first message in the conversation.
                                 * @example 2025-05-27T15:02:44.499744+00:00
                                 */
                                firstMessageAt?: string;
                                /**
                                 * Format: date-time
                                 * @description The timestamp of the last message in the conversation.
                                 * @example 2025-05-27T15:02:44.499744+00:00
                                 */
                                lastMessageAt?: string;
                                /**
                                 * Format: date-time
                                 * @description The timestamp of the last assistant reply in the conversation.
                                 * @example 2025-05-27T15:02:44.499744+00:00
                                 */
                                lastReplicaReplyAt?: string;
                                /**
                                 * @description The name of the conversation. This can be the name of the user or the name of the group.
                                 * @example John Doe
                                 */
                                conversationName?: string;
                                /**
                                 * @description The image URL of the conversation. This can be the profile image of the user or the group.
                                 * @example https://example.com/image.png
                                 */
                                conversationImageURL?: string;
                                /**
                                 * @description A summary of the conversation.
                                 * @example Discussion about blockchain technology and its applications in fintech.
                                 */
                                summary: string;
                                /**
                                 * @description Common questions asked in this conversation.
                                 * @example [
                                 *       "What is blockchain?",
                                 *       "How does DeFi work?",
                                 *       "What are smart contracts?"
                                 *     ]
                                 */
                                commonQuestions: string[];
                                /**
                                 * @description Common topics discussed in this conversation.
                                 * @example [
                                 *       "blockchain",
                                 *       "cryptocurrency",
                                 *       "smart contracts",
                                 *       "fintech"
                                 *     ]
                                 */
                                commonTopics: string[];
                                /**
                                 * @description The type of conversation.
                                 * @example individual
                                 * @enum {string}
                                 */
                                conversationType: "individual" | "group";
                            }[];
                            /**
                             * @description The total number of conversations for this replica.
                             * @example 1001
                             */
                            total: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/conversations/{conversationUUID}/mentions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List mentions in a conversation
         * @description Retrieves mentions of a replica in a specific conversation, together with context surrounding the mention. This endpoint supports cursor-based pagination. Returns most recent mentions first.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    afterUUID?: string;
                    beforeUUID?: string;
                    minimumMessagesInPlaceholder?: number | null;
                };
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                    conversationUUID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of messages/placeholders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            items: ({
                                /** @enum {string} */
                                type: "mention";
                                messages: {
                                    /**
                                     * Format: uuid
                                     * @description The UUID of the message.
                                     * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                     */
                                    uuid: string;
                                    /**
                                     * Format: date-time
                                     * @description The date and time the message was created.
                                     * @example 2024-09-24T09:09:55.66709+00:00
                                     */
                                    createdAt: string;
                                    /**
                                     * @description The content of the message.
                                     * @example Hello world!
                                     */
                                    content: string;
                                    /**
                                     * @description The role of the message sender.
                                     * @example user
                                     * @enum {string}
                                     */
                                    role: "user" | "assistant";
                                    /**
                                     * @description The name of the message sender, if available.
                                     * @example John Doe
                                     */
                                    senderName?: string;
                                    /**
                                     * @description The avatar URL of the message sender, if available.
                                     * @example https://example.com/avatar.png
                                     */
                                    senderProfileImageURL?: string;
                                    /**
                                     * @description The source of the message.
                                     * @example web
                                     * @enum {string}
                                     */
                                    source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                                }[];
                            } | {
                                /** @enum {string} */
                                type: "placeholder";
                                /**
                                 * @description The number of messages collapsed into this placeholder
                                 * @example 20
                                 */
                                count: number;
                            })[];
                            /**
                             * @description Whether there are more items available beyond the current page
                             * @example true
                             */
                            hasMore: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/conversations/{conversationUUID}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List messages in a conversation
         * @description Retrieves messages in a specific conversation with cursor-based pagination. Messages are sorted chronologically from oldest to newest.
         *
         *     Use the `beforeUUID` parameter to get older messages and the `afterUUID` parameter to get newer messages. Please note:
         *      - When `beforeUUID` is specified, the most recent messages before `beforeUUID` are returned.
         *      - When `beforeUUID` and `afterUUID` are both specified, the most recent messages before `beforeUUID` are returned.
         *      - When `afterUUID` is specified on its own, the least recent messages after `afterUUID` are returned.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    afterUUID?: string;
                    beforeUUID?: string;
                };
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                    conversationUUID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of messages in the conversation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            items: {
                                /**
                                 * Format: uuid
                                 * @description The UUID of the message.
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                uuid: string;
                                /**
                                 * Format: date-time
                                 * @description The date and time the message was created.
                                 * @example 2024-09-24T09:09:55.66709+00:00
                                 */
                                createdAt: string;
                                /**
                                 * @description The content of the message.
                                 * @example Hello world!
                                 */
                                content: string;
                                /**
                                 * @description The role of the message sender.
                                 * @example user
                                 * @enum {string}
                                 */
                                role: "user" | "assistant";
                                /**
                                 * @description The name of the message sender, if available.
                                 * @example John Doe
                                 */
                                senderName?: string;
                                /**
                                 * @description The avatar URL of the message sender, if available.
                                 * @example https://example.com/avatar.png
                                 */
                                senderProfileImageURL?: string;
                                /**
                                 * @description The source of the message.
                                 * @example web
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                replicaUUID: components["schemas"]["replicaUUID_parameter"];
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/analytics/conversations/historical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get replica historical conversation analytics
         * @description Returns cumulative conversation count for the last 30 days, up to and including today.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Historical conversation analytics data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /**
                             * @description List of daily cumulative conversation counts for the last 30 days. The cutoff for counting conversations towards a specific day is UTC midnight.
                             * @example [
                             *       {
                             *         "date": "2025-05-01",
                             *         "cumulativeConversations": 100
                             *       },
                             *       {
                             *         "date": "2025-05-02",
                             *         "cumulativeConversations": 103
                             *       },
                             *       {
                             *         "date": "2025-05-03",
                             *         "cumulativeConversations": 108
                             *       }
                             *     ]
                             */
                            items: {
                                /**
                                 * Format: date
                                 * @description The date in YYYY-MM-DD format.
                                 * @example 2025-05-15
                                 */
                                date: string;
                                /**
                                 * @description The cumulative number of conversations up to this date.
                                 * @example 127
                                 */
                                cumulativeConversations: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/analytics/conversations/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get replica source analytics
         * @description Returns interaction counts by source for the replica.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Source analytics data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /**
                             * @description List of conversation counts by source for the replica, as of today.
                             * @example [
                             *       {
                             *         "source": "telegram",
                             *         "conversations": 245
                             *       },
                             *       {
                             *         "source": "discord",
                             *         "conversations": 123
                             *       },
                             *       {
                             *         "source": "web",
                             *         "conversations": 89
                             *       }
                             *     ]
                             */
                            items: {
                                /**
                                 * @description The source of the conversations.
                                 * @example telegram
                                 * @enum {string}
                                 */
                                source: "discord" | "telegram" | "embed" | "web" | "telegram_autopilot";
                                /**
                                 * @description The total number of conversations from this source.
                                 * @example 245
                                 */
                                conversations: number;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/training": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a knowledge base entry
         * @description Creates a new empty knowledge base entry for a replica. This is the first step in the text-based training process. After creating the entry, you'll receive a knowledgeBaseID that you'll need to use in the next step to add your training content using the Update endpoint. The entry starts with a BLANK status and will be processed automatically once you add content.
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The created knowledge base entry */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates if the knowledge base entry was created successfully */
                            success: boolean;
                            /**
                             * @description The unique identifier for the newly created knowledge base entry.
                             * @example 12345
                             */
                            knowledgeBaseID: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/training/{trainingID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update knowledge base entry
         * @description Updates a knowledge base entry with training content. This is the second step in the training process after creating an entry. You can provide "rawText" which is the content you want your replica to learn from (such as product information, company policies, or specialized knowledge). The system will automatically process this text and make it available for your replica to use when answering questions. The entry status will change to PROCESSING and then to READY once fully processed.
         */
        put: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                    "Content-Encoding"?: "gzip";
                };
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                    trainingID: components["schemas"]["trainingID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The text content you want your replica to learn
                         * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions.
                         */
                        rawText?: string;
                        /**
                         * @description Pre-processed text that is ready to be added to the knowledge base. This is typically used when you have already optimized the text format.
                         * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions.
                         */
                        processedText?: string;
                        /**
                         * @description The ID of the vector entry in the database. Its presenceindicates the information has been fully processed and is ready for retrieval.
                         * @example 1337
                         */
                        vectorEntryId?: string;
                        /**
                         * @description Additional information about the knowledge base entry, such as source, tags, or other contextual data (only used when vectorEntryId is present)
                         * @example {
                         *       "source": "company handbook",
                         *       "page": 42,
                         *       "tags": [
                         *         "company info",
                         *         "history"
                         *       ]
                         *     }
                         */
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Knowledge base entry updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/training/{trainingID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get knowledge base entry by ID
         * @description Retrieves detailed information about a specific knowledge base entry using its ID. This endpoint returns the complete entry data including its type, status, content, and metadata. You can use this to check the processing status of your training content, view the raw and processed text, and see when it was created and last updated. This is useful for monitoring the progress of your training data as it moves through the processing pipeline.
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    trainingID: components["schemas"]["trainingID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The knowledge base entry returned successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description The unique identifier for this knowledge base entry. Use this ID in subsequent API calls to update or delete this entry.
                             * @example 12345
                             */
                            id: number;
                            /**
                             * Format: uuid
                             * @description The unique identifier of the replica that owns this knowledge base entry. This links the training data to a specific replica.
                             * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                             */
                            replica_uuid: string | null;
                            /**
                             * @description The type of knowledge base entry, indicating how the content was added and how it should be processed.
                             * @example file_upload
                             * @enum {string}
                             */
                            type: "file_upload" | "url" | "training_history" | "text";
                            /**
                             * @description For file_upload entries, the original filename that was uploaded. This helps identify the source of the content.
                             * @example company_handbook.pdf
                             */
                            filename: string | null;
                            /**
                             * @description For url entries, the original url of the content.
                             * @example http://example.com
                             */
                            url?: string;
                            /**
                             * @description The current stage in the processing pipeline. Use this to track progress and identify any issues with processing.
                             * @example READY
                             * @enum {string}
                             */
                            status: "AWAITING_UPLOAD" | "SUPABASE_ONLY" | "PROCESSING" | "READY" | "SYNC_ERROR" | "ERR_FILE_PROCESSING" | "ERR_TEXT_PROCESSING" | "ERR_TEXT_TO_VECTOR" | "BLANK";
                            /**
                             * @description The original, unmodified text content that was submitted for training. May be truncated for large entries.
                             * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions. Our business hours are Monday to Friday, 9 AM to 5 PM Eastern Time.
                             */
                            raw_text: string | null;
                            /**
                             * @description The optimized version of the text after system processing. This is what gets converted to vectors for retrieval.
                             * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions. Our business hours are Monday to Friday, 9 AM to 5 PM Eastern Time.
                             */
                            processed_text: string | null;
                            /**
                             * Format: date-time
                             * @description ISO 8601 timestamp when this knowledge base entry was first created.
                             * @example 2025-04-15T08:11:00.093761+00:00
                             */
                            created_at: string;
                            /**
                             * Format: date-time
                             * @description ISO 8601 timestamp when this knowledge base entry was last modified. Use this to track when processing completed.
                             * @example 2025-04-15T08:15:05.299349+00:00
                             */
                            updated_at: string;
                            /**
                             * @description Title for this knowledge base entry. Helps identify the content in listings.
                             * @example Company Information
                             */
                            title: string | null;
                            /**
                             * @description Optional description providing more details about this knowledge base entry.
                             * @example Basic company details including founding date, business focus, and operating hours.
                             */
                            description: string | null;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete knowledge base entry by ID
         * @description Permanently removes a specific knowledge base entry and its associated vector database entry. Use this endpoint when you need to remove outdated or incorrect training data from your replica's knowledge base. This operation cannot be undone, and the entry will no longer be available for retrieval during conversations with your replica. This endpoint handles the complete cleanup process, removing both the database record and any associated vector embeddings.
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "X-API-Version"?: string;
                };
                path: {
                    trainingID: components["schemas"]["trainingID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The knowledge base entry was deleted successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Indicates whether the knowledge base entry and its associated vector embeddings were successfully deleted from the system
                             * @example true
                             */
                            success: boolean;
                        };
                    };
                };
                /** @description Knowledge base entry not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/training": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all knowledge base entries
         * @description Returns a list of all knowledge base entries belonging to your organization. This endpoint allows you to view all your training data in one place, with optional filtering by status or type. You can use this to monitor the overall state of your knowledge base, check which entries are still processing, and identify any that might have encountered errors. The response includes detailed information about each entry including its content, status, and metadata.
         */
        get: {
            parameters: {
                query?: {
                    status?: "AWAITING_UPLOAD" | "SUPABASE_ONLY" | "PROCESSING" | "READY" | "SYNC_ERROR" | "ERR_FILE_PROCESSING" | "ERR_TEXT_PROCESSING" | "ERR_TEXT_TO_VECTOR" | "BLANK";
                    type?: "file_upload" | "url" | "training_history" | "text";
                    page?: string;
                    limit?: string;
                };
                header?: {
                    "X-API-Version"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of knowledge base entries returned successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Indicates if the list operation was successful
                             * @example true
                             */
                            success: boolean;
                            /**
                             * @description Array of knowledge base entries matching your query parameters
                             * @example [
                             *       {
                             *         "id": 12345,
                             *         "replica_uuid": "03db5651-cb61-4bdf-9ef0-89561f7c9c53",
                             *         "type": "text",
                             *         "filename": null,
                             *         "status": "READY",
                             *         "raw_text": "Our company was founded in 2020...",
                             *         "processed_text": "Our company was founded in 2020...",
                             *         "created_at": "2025-04-15T08:11:00.093761+00:00",
                             *         "updated_at": "2025-04-15T08:11:05.299349+00:00",
                             *         "title": "Company Information",
                             *         "description": "Basic company details and policies"
                             *       }
                             *     ]
                             */
                            items: {
                                /**
                                 * @description The unique identifier for this knowledge base entry. Use this ID in subsequent API calls to update or delete this entry.
                                 * @example 12345
                                 */
                                id: number;
                                /**
                                 * Format: uuid
                                 * @description The unique identifier of the replica that owns this knowledge base entry. This links the training data to a specific replica.
                                 * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
                                 */
                                replica_uuid: string | null;
                                /**
                                 * @description The type of knowledge base entry, indicating how the content was added and how it should be processed.
                                 * @example file_upload
                                 * @enum {string}
                                 */
                                type: "file_upload" | "url" | "training_history" | "text";
                                /**
                                 * @description For file_upload entries, the original filename that was uploaded. This helps identify the source of the content.
                                 * @example company_handbook.pdf
                                 */
                                filename: string | null;
                                /**
                                 * @description For url entries, the original url of the content.
                                 * @example http://example.com
                                 */
                                url?: string;
                                /**
                                 * @description The current stage in the processing pipeline. Use this to track progress and identify any issues with processing.
                                 * @example READY
                                 * @enum {string}
                                 */
                                status: "AWAITING_UPLOAD" | "SUPABASE_ONLY" | "PROCESSING" | "READY" | "SYNC_ERROR" | "ERR_FILE_PROCESSING" | "ERR_TEXT_PROCESSING" | "ERR_TEXT_TO_VECTOR" | "BLANK";
                                /**
                                 * @description The original, unmodified text content that was submitted for training. May be truncated for large entries.
                                 * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions. Our business hours are Monday to Friday, 9 AM to 5 PM Eastern Time.
                                 */
                                raw_text: string | null;
                                /**
                                 * @description The optimized version of the text after system processing. This is what gets converted to vectors for retrieval.
                                 * @example Our company was founded in 2020. We specialize in AI-powered customer service solutions. Our business hours are Monday to Friday, 9 AM to 5 PM Eastern Time.
                                 */
                                processed_text: string | null;
                                /**
                                 * Format: date-time
                                 * @description ISO 8601 timestamp when this knowledge base entry was first created.
                                 * @example 2025-04-15T08:11:00.093761+00:00
                                 */
                                created_at: string;
                                /**
                                 * Format: date-time
                                 * @description ISO 8601 timestamp when this knowledge base entry was last modified. Use this to track when processing completed.
                                 * @example 2025-04-15T08:15:05.299349+00:00
                                 */
                                updated_at: string;
                                /**
                                 * @description Title for this knowledge base entry. Helps identify the content in listings.
                                 * @example Company Information
                                 */
                                title: string | null;
                                /**
                                 * @description Optional description providing more details about this knowledge base entry.
                                 * @example Basic company details including founding date, business focus, and operating hours.
                                 */
                                description: string | null;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/replicas/{replicaUUID}/training/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate a signed URL for file upload
         * @description Creates a signed URL for uploading a file to the knowledge base. This is the first step in the file-based training process. The response includes both a signedURL where you can upload your file and a knowledgeBaseID for tracking. After receiving these, use a PUT request to the signedURL to upload your file (with Content-Type: application/octet-stream). The system will automatically extract text from your file, process it, and make it available for your replica to use. Supported file types include PDF, DOCX, and other text-based formats. Files up to 50MB are supported.
         */
        get: {
            parameters: {
                query: {
                    filename: string;
                };
                header?: never;
                path: {
                    replicaUUID: components["schemas"]["replicaUUID_parameter"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The generated signed URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates if the signed URL was generated successfully */
                            success: boolean;
                            /**
                             * @description The temporary URL where you should upload your file using a PUT request with Content-Type: application/octet-stream
                             * @example https://storage.googleapis.com/replica_files/...
                             */
                            signedURL?: string;
                            /**
                             * @description The unique identifier for the newly created knowledge base entry. Use this to track the processing status of your file.
                             * @example 12345
                             */
                            knowledgeBaseID?: number;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Unsupported Media Type */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Indicates the status of the request */
                            success: boolean;
                            /** @description A text representation of the error */
                            error: string;
                            /**
                             * @description A unique identifier of the event, useful for reporting
                             * @example 14fceadd84e74ec499afe9b0f7952d6b
                             */
                            fingerprint?: string;
                            /**
                             * @description A unique identifier of the request, useful for reporting
                             * @example xyz1::reg1:reg1::ab3c4-1234567890123-0123456789ab
                             */
                            request_id: string;
                            /**
                             * @description The inner exception
                             * @example {
                             *       "name": "Server overheated",
                             *       "message": "The server overheated due to an unexpected situation",
                             *       "cause": "Request too complicated",
                             *       "stack": "Error: Server overheated due to an unexpected situation\n    at Object.eval (eval at <anonymous>..."
                             *     }
                             */
                            inner_exception?: {
                                name: string;
                                message: string;
                                cause?: string;
                                stack?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Format: uuid
         * @description The replica unique identifier (UUID)
         * @example 03db5651-cb61-4bdf-9ef0-89561f7c9c53
         */
        replicaUUID_parameter: string;
        /**
         * @description The unique identifier of the knowledge base entry
         * @example 12345
         */
        trainingID_parameter: number | null;
        /** @example {
         *       "type": "INSERT",
         *       "table": "objects",
         *       "record": {
         *         "id": "8f4611db-c346-4959-b173-681156612bfd",
         *         "name": "2ba8848c-1639-563a-a559-959fa25c70bd/2",
         *         "owner": null,
         *         "version": "5dac074f-fc41-420d-ab03-5ab04ef42961",
         *         "metadata": {
         *           "eTag": "\"f1cd0725ddb77f5a67a508cc48c8e554\"",
         *           "size": 16085011,
         *           "mimetype": "application/pdf",
         *           "cacheControl": "no-cache",
         *           "lastModified": "2025-02-27T15:58:44.284Z",
         *           "contentLength": 16085011,
         *           "httpStatusCode": 200
         *         },
         *         "owner_id": null,
         *         "bucket_id": "replica_files",
         *         "created_at": "2025-02-27T15:58:44.501551+00:00",
         *         "updated_at": "2025-02-27T15:58:44.501551+00:00",
         *         "path_tokens": [
         *           "2ba8848c-1639-563a-a559-959fa25c70bd",
         *           "2"
         *         ],
         *         "user_metadata": {},
         *         "last_accessed_at": "2025-02-27T15:58:44.501551+00:00"
         *       },
         *       "schema": "storage",
         *       "old_record": null
         *     } */
        WebhookRequest: {
            type: string;
            table: string;
            schema: string;
            record: {
                id: string;
                bucket_id: string;
                path_tokens: string[];
                metadata: {
                    size: number;
                    mimetype: string;
                    eTag: string;
                };
            };
            old_record?: unknown;
        };
        /**
         * @description The unique identifier of the knowledge base entry
         * @example 12345
         */
        knowledgeBaseID_parameter: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description API version */
        "X-API-Version": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
